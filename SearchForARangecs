public class Solution {
    
    public int[] SearchRange(int[] A, int target)
    {
        int[] result = { -1, -1 };
        // find target
        int index = binarySearch(A, 0, A.Length - 1, target);

        if (index != -1)
        {
            int left = index;
            int right = index;
            //result[0] = left;
            //result[1] = right;
            
            // 在左半区查找，缩小左半区范围，直到不包含目标
            while (left != -1)
            {
                result[0] = left;
                left = binarySearch(A, 0, left - 1, target);
            }
            // 等效的代码
            //while ((left = binarySearch(A, 0, left - 1, target)) != -1)
            //    result[0] = left;
            
            while (right != -1)
            {
                result[1] = right;
                right = binarySearch(A, right + 1, A.Length - 1, target);
            }
            //
            //while ((right = binarySearch(A, right + 1, A.Length - 1, target)) != -1)
            //    result[1] = right;
        }

        return result;
    }
    
    public int binarySearch(int[] A, int left, int right, double target)
    {
        while (left <= right)
        {
            int mid = left + ((right - left) >> 1);
            
            if (target == A[mid])
            {
                return mid;
            }
            else if (target < A[mid])
            {
                right = mid - 1;
            }
            else if (target > A[mid])
            {
                left = mid + 1;
            }
        }

        return -1;
    }
}
